import { ConnectButton } from '@rainbow-me/rainbowkit';
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { useAccount, useReadContract , useWriteContract } from 'wagmi';
import { FormEvent, useEffect, useState } from 'react';
import { Span } from 'next/dist/trace';
import contract from "../contract.json";

const Home: NextPage = () => {
  const account = useAccount()
  const [userAddress, setUserSAddress] = useState<String>("");
  const { writeContract } = useWriteContract()

  const [Name, setName] = useState("");
  const [Hash, setHash] = useState("");

  const { refetch } = useReadContract({
    abi: contract.abi,
    address: contract.addressFuji as `0x${string}`,
    functionName: 'verifyDocument',
    args: [Name, Hash, userAddress],
  })


  useEffect(() => {
    if(account.address){
      setUserSAddress(account.address);
      console.log({ account: account.address });
    }else{
      setUserSAddress("");
    }
  }, [account]); 

  const uploadDocument = async (event: FormEvent<HTMLFormElement>) => {
    //code
    event.preventDefault()
    const newName = event.target[0].value;
    const newType = event.target[1].value;
    const newHash = event.target[2].value;
    const newOwner = event.target[3].value;
    writeContract({ 
      abi: contract.abi,
      address: contract.addressFuji as `0x${string}`,
      functionName: 'uploadNewDocument',
      args: [newName, newType, newHash, newOwner],
   })
  } 

  const verifyDocument = async (event: FormEvent<HTMLFormElement>) => {
    //code
    event.preventDefault()
    setName(event.target[0].value);
    setHash(event.target[1].value);
    const result = await refetch();
    console.log(result.error);
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>RainbowKit App</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />

        <h1>Document Storage</h1>
        <div>
  {userAddress !== "" && (
    <>
      <span>El usuario {userAddress} se ha conectado satisfactoriamente</span>
      
      <div>
        <h1>Subir un archivo</h1>
        <form onSubmit={uploadDocument}>
          <div>
            Digita el nombre del archivo
            <br />
            <input type="text" name="name" />
          </div>
          <div>
            Digita el tipo del archivo
            <br />
            <input type="text" name="type" />
          </div>
          <div>
            Digita el hash del archivo
            <br />
            <input type="text" name="hash" />
          </div>
          <div>
            Digita el due√±o del archivo
            <br />
            <input type="text" name="owner" />
          </div>
          <button type="submit">Sube el archivo</button>
        </form>
        </div>

        <div>
        <h1>Verificar si es original</h1>
        <form onSubmit={verifyDocument}>
          <div>
            Digita el nombre del archivo
            <br />
            <input type="text" name="name" />
          </div>
          <div>
            Digita el hash del archivo a verificar
            <br />
            <input type="text" name="hash" />
          </div>
          <button type="submit">Verificar Autenticidad</button>
        </form>
        </div>
        </>
        )}
      </div>


        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.tsx</code>
        </p>

      </main>

      <footer className={styles.footer}>
        <a href="https://rainbow.me" rel="noopener noreferrer" target="_blank">
          Made with ‚ù§Ô∏è by your frens at üåà
        </a>
      </footer>
    </div>
  );
};

export default Home;
